# Default values for ray-cluster.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

image:
  repository: rayproject/ray
  tag: latest
  pullPolicy: IfNotPresent

nameOverride: "ray"
fullnameOverride: ""

imagePullSecrets: []
  # - name: an-existing-secret

ray:
  autoscaler:
    inTree: true
    serviceAccount:
      create: true
      name: autoscaler-sa
      labels: {}
      annotations: {}
    image: rayproject/ray:413fe0
    resources:
      requests:
        cpu: 250m
        memory: 1024Mi
      limits:
        cpu: 500m
        memory: 1024Mi
    # use volumeMounts.Optional.
    # Refer to https://kubernetes.io/docs/concepts/storage/volumes/
    volumeMounts:
      - mountPath: /tmp/ray
        name: log-volume
  head:
    replicas: 1
    num_cpus: &headCPU 1 # Set to 0 if the head node should not do work.
    groupName: headgroup
    type: head
    dashboard:
      access: true
      port: 8265
    initArgs:
      port: '6379'
      dashboard-host: '0.0.0.0'
      num-cpus: *headCPU  # can be auto-completed from the limits (leave at 0 for no work done on head node)
      node-ip-address: $MY_POD_IP # auto-completed as the head pod IP
      block: 'true'
      redis-password: 'LetMeInRay' # Deprecated since Ray 1.11 due to GCS bootstrapping enabled
    ports:
      - containerPort: 6379
        protocol: TCP
    resources:
      limits:
        cpu: 1
        memory: 250Mi
      requests:
        cpu: 200m
        memory: 500Mi
    containerEnv: []
    envFrom: []
    labels: {}
    annotations: {}
    nodeSelector: {}
    tolerations: {}
    affinity: {}
    volumes:
      - name: log-volume
        emptyDir: {}
    volumeMounts:
      - mountPath: /tmp/ray
        name: log-volume

  workers:
    # groupName is equivalent to the key of the map it's under e.g. cpuWorker has groupName cpuWorker
    cpuWorker:
      # name must consist of lower case alphanumeric characters or '-', and must start and end with an alphanumeric character (e.g. 'my-name',  or '123-abc'
      containerName: ray-worker
      replicaCount: 1
      minReplicas: 1
      maxReplicas: 300
      resources:
        requests:
          cpu: 1
          memory: 512Mi
        limits:
          cpu: 1
          memory: 512Mi
      initArgs:
        node-ip-address: $MY_POD_IP
        block: 'true'
        num-cpus: $CPU_LIMITS
        redis-password: LetMeInRay
      containerEnv: []
      envFrom: []
      labels: {}
      annotations: {}
      nodeSelector: {}
      tolerations: {}
      affinity: {}
      ports:
        - containerPort: 80
          protocol: TCP
      volumeMounts:
        - mountPath: /tmp/ray
          name: log-volume
      volumes:
        - name: log-volume
          emptyDir: {}

    # Uncomment below for a GPU worker example with AWS
    # # Example gpu worker group for more details see:
    # # https://docs.ray.io/en/latest/cluster/kubernetes-gpu.html
    # gpuWorker:
    #   # name must consist of lower case alphanumeric characters or '-', and must start and end with an alphanumeric character (e.g. 'my-name',  or '123-abc'
    #   containerName: ray-gpu-worker
    #   replicaCount: 1
    #   minReplicas: 1
    #   maxReplicas: 3
    #   resources:
    #     requests:
    #       cpu: 29
    #       memory: 100Gi
    #     limits:
    #       cpu: 29
    #       memory: 100Gi
    #       nvidia.com/gpu: 1
    #   initArgs:
    #     node-ip-address: $MY_POD_IP
    #     block: 'true'
    #     num-cpus: $CPU_LIMITS
    #     num-gpus: '1'
    #   nodeSelector:
    #     node.kubernetes.io/instance-type: g4dn.8xlarge
    #     spot: "yes"
    #   tolerations:
    #     - effect: NoSchedule
    #       key: nvidia.com/gpu
    #       operator: Exists
    #   containerEnv: []
    #   envFrom: []
    #   labels: {}
    #   annotations: {}
    #   affinity: {}
    #   ports:
    #     - containerPort: 80
    #       protocol: TCP
    #   volumeMounts:
    #     - mountPath: /tmp/ray
    #       name: log-volume
    #   volumes:
    #     - name: log-volume
    #       emptyDir: {}

# This does not seem to be in use yet.
headServiceSuffix: "ray-operator.svc"

# This does not seem to be in use.
service:
  type: ClusterIP
  port: 8080
