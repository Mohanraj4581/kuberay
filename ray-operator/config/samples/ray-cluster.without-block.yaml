# This example config does not specify resource requests or limits.
# For examples with more realistic resource configuration, see
# ray-cluster.complete.large.yaml and
# ray-cluster.autoscaler.large.yaml.
apiVersion: ray.io/v1alpha1
kind: RayCluster
metadata:
  labels:
    controller-tools.k8s.io: "1.0"
    # An unique identifier for the head node and workers of this cluster.
  name: raycluster-non-block
spec:
  rayVersion: '2.0.0' # should match the Ray version in the image of the containers
  ######################headGroupSpecs#################################
  # head group template and specs, (perhaps 'group' is not needed in the name)
  headGroupSpec:
    # Kubernetes Service Type, valid values are 'ClusterIP', 'NodePort' and 'LoadBalancer'
    serviceType: ClusterIP
    # the pod replicas in this group typed head (assuming there could be more than 1 in the future)
    replicas: 1
    # logical group name, for this called head-group, also can be functional
    # pod type head or worker
    # rayNodeType: head # Not needed since it is under the headgroup
    # the following params are used to complete the ray start: ray start --head --block --redis-port=6379 ...
    rayStartParams:
      port: '6379' # should match headService targetPort
      object-store-memory: '100000000'
      redis-password: 'LetMeInRay' # Deprecated since Ray 1.11 due to GCS bootstrapping enabled
      dashboard-host: '0.0.0.0'
      num-cpus: '1' # can be auto-completed from the limits
      node-ip-address: $MY_POD_IP # auto-completed as the head pod IP
    #pod template
    template:
      metadata:
        labels:
          # custom labels. NOTE: do not define custom labels start with `raycluster.`, they may be used in controller.
          # Refer to https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
          rayCluster: raycluster-sample # will be injected if missing
          rayNodeType: head # will be injected if missing, must be head or wroker
          groupName: headgroup # will be injected if missing
        # annotations for pod
        annotations:
          key: value
      spec:
        containers:
        - name: ray-head
          image: rayproject/ray:2.0.0
          # Without the `--block` flag in the `ray start` command, the following commands will be executed after `ray start`.
          # You can use `kubectl logs` command to check the head pod's log to make sure `sample.yaml` is executed.
          command: ["/bin/sh", "-c", "ulimit -n 65536; ray start --head  --num-cpus=1  --object-store-memory=100000000  --port=6379  --redis-password=LetMeInRay  --dashboard-host=0.0.0.0  --node-ip-address=$MY_POD_IP  --metrics-export-port=8080; python -c \"import ray; ray.init(); print(ray.cluster_resources())\"; sleep infinity"]
          env:
          - name: MY_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          ports:
          - containerPort: 6379
