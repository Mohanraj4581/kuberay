// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ray-project/kuberay/ray-operator/controllers/ray/metrics (interfaces: RayServiceMetricsObserver)
//
// Generated by this command:
//
//	mockgen -destination=mocks/ray_service_metrics_mock.go -package=mocks github.com/ray-project/kuberay/ray-operator/controllers/ray/metrics RayServiceMetricsObserver
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRayServiceMetricsObserver is a mock of RayServiceMetricsObserver interface.
type MockRayServiceMetricsObserver struct {
	ctrl     *gomock.Controller
	recorder *MockRayServiceMetricsObserverMockRecorder
	isgomock struct{}
}

// MockRayServiceMetricsObserverMockRecorder is the mock recorder for MockRayServiceMetricsObserver.
type MockRayServiceMetricsObserverMockRecorder struct {
	mock *MockRayServiceMetricsObserver
}

// NewMockRayServiceMetricsObserver creates a new mock instance.
func NewMockRayServiceMetricsObserver(ctrl *gomock.Controller) *MockRayServiceMetricsObserver {
	mock := &MockRayServiceMetricsObserver{ctrl: ctrl}
	mock.recorder = &MockRayServiceMetricsObserverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRayServiceMetricsObserver) EXPECT() *MockRayServiceMetricsObserverMockRecorder {
	return m.recorder
}

// ObserveRayServiceReady mocks base method.
func (m *MockRayServiceMetricsObserver) ObserveRayServiceReady(name, namespace string, ready bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ObserveRayServiceReady", name, namespace, ready)
}

// ObserveRayServiceReady indicates an expected call of ObserveRayServiceReady.
func (mr *MockRayServiceMetricsObserverMockRecorder) ObserveRayServiceReady(name, namespace, ready any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObserveRayServiceReady", reflect.TypeOf((*MockRayServiceMetricsObserver)(nil).ObserveRayServiceReady), name, namespace, ready)
}
