// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ray-project/kuberay/ray-operator/controllers/ray/metrics (interfaces: RayJobMetricsCollector)
//
// Generated by this command:
//
//	mockgen -destination=mocks/ray_job_metrics_mock.go -package=mocks github.com/ray-project/kuberay/ray-operator/controllers/ray/metrics RayJobMetricsCollector
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRayJobMetricsCollector is a mock of RayJobMetricsCollector interface.
type MockRayJobMetricsCollector struct {
	ctrl     *gomock.Controller
	recorder *MockRayJobMetricsCollectorMockRecorder
	isgomock struct{}
}

// MockRayJobMetricsCollectorMockRecorder is the mock recorder for MockRayJobMetricsCollector.
type MockRayJobMetricsCollectorMockRecorder struct {
	mock *MockRayJobMetricsCollector
}

// NewMockRayJobMetricsCollector creates a new mock instance.
func NewMockRayJobMetricsCollector(ctrl *gomock.Controller) *MockRayJobMetricsCollector {
	mock := &MockRayJobMetricsCollector{ctrl: ctrl}
	mock.recorder = &MockRayJobMetricsCollectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRayJobMetricsCollector) EXPECT() *MockRayJobMetricsCollectorMockRecorder {
	return m.recorder
}

// ObserveRayJobExecutionDuration mocks base method.
func (m *MockRayJobMetricsCollector) ObserveRayJobExecutionDuration(name, namespace, result string, retryCount int, duration float64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ObserveRayJobExecutionDuration", name, namespace, result, retryCount, duration)
}

// ObserveRayJobExecutionDuration indicates an expected call of ObserveRayJobExecutionDuration.
func (mr *MockRayJobMetricsCollectorMockRecorder) ObserveRayJobExecutionDuration(name, namespace, result, retryCount, duration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObserveRayJobExecutionDuration", reflect.TypeOf((*MockRayJobMetricsCollector)(nil).ObserveRayJobExecutionDuration), name, namespace, result, retryCount, duration)
}
