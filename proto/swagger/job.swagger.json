{
  "swagger": "2.0",
  "info": {
    "title": "job.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "RayJobService"
    }
  ],
  "schemes": [
    "http"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/apis/v1alpha2/jobs": {
      "get": {
        "summary": "Finds all job in all namespaces. Supports pagination, and sorting on certain fields.",
        "operationId": "RayJobService_ListAllRayJobs",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protoListAllRayJobsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "RayJobService"
        ]
      },
      "post": {
        "summary": "Creates a new job.",
        "operationId": "RayJobService_CreateRayJob",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protoRayJob"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "The job to be created.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/protoRayJob"
            }
          },
          {
            "name": "namespace",
            "description": "The namespace of the job to be created.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "RayJobService"
        ]
      }
    },
    "/apis/v1alpha2/namespaces/{namespace}/jobs": {
      "get": {
        "summary": "Finds all job in a given namespace. Supports pagination, and sorting on certain fields.",
        "operationId": "RayJobService_ListRayJobs",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protoListRayJobsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "description": "The namespace of the job to be retrieved.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "RayJobService"
        ]
      }
    },
    "/apis/v1alpha2/namespaces/{namespace}/jobs/{name}": {
      "get": {
        "summary": "Finds a specific job by its name and namespace.",
        "operationId": "RayJobService_GetRayJob",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protoRayJob"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "description": "The namespace of the job to be retrieved.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "The name of the job to be retrieved.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "RayJobService"
        ]
      },
      "delete": {
        "summary": "Deletes a job by its name and namespace.",
        "operationId": "RayJobService_DeleteRayJob",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "description": "The namespace of the job to be deleted.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "The name of the job to be deleted.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "RayJobService"
        ]
      }
    }
  },
  "definitions": {
    "VolumeAccessMode": {
      "type": "string",
      "enum": [
        "RWO",
        "ROX",
        "RWX"
      ],
      "default": "RWO"
    },
    "VolumeHostPathType": {
      "type": "string",
      "enum": [
        "DIRECTORY",
        "FILE"
      ],
      "default": "DIRECTORY",
      "description": "If indicate hostpath, we need to let user indicate which type \nthey would like to use."
    },
    "VolumeMountPropagationMode": {
      "type": "string",
      "enum": [
        "NONE",
        "HOSTTOCONTAINER",
        "BIDIRECTIONAL"
      ],
      "default": "NONE"
    },
    "VolumeVolumeType": {
      "type": "string",
      "enum": [
        "PERSISTENT_VOLUME_CLAIM",
        "HOST_PATH",
        "EPHEMERAL"
      ],
      "default": "PERSISTENT_VOLUME_CLAIM"
    },
    "googlerpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "protoClusterSpec": {
      "type": "object",
      "properties": {
        "headGroupSpec": {
          "$ref": "#/definitions/protoHeadGroupSpec",
          "title": "The head group configuration"
        },
        "workerGroupSpec": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protoWorkerGroupSpec"
          },
          "title": "The worker group configurations"
        }
      }
    },
    "protoHeadGroupSpec": {
      "type": "object",
      "properties": {
        "computeTemplate": {
          "type": "string",
          "title": "Optional. The computeTemplate of head node group"
        },
        "image": {
          "type": "string",
          "title": "Optional field. This field will be used to retrieve right ray container"
        },
        "serviceType": {
          "type": "string",
          "title": "Optional. The service type (ClusterIP, NodePort, Load balancer) of the head node"
        },
        "enableIngress": {
          "type": "boolean",
          "title": "Optional. Enable Ingress\nif Ingress is enabled, we might have to specify annotation IngressClassAnnotationKey, for the cluster itself, defining Ingress class"
        },
        "rayStartParams": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Optional. The ray start params of head node group."
        },
        "volumes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protoVolume"
          },
          "title": "Optional. The volumes mount to head pod"
        },
        "serviceAccount": {
          "type": "string",
          "title": "Optional. ServiceAccount used by head pod\nNote that the service account has to be created prior to usage here"
        },
        "imagePullSecret": {
          "type": "string",
          "title": "Optional. image pull secret used by head pod"
        },
        "environment": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Optional. Environment variables for head pod"
        },
        "annotations": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Optional. Annotations for the head pod"
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Optional. Labels for the head pod"
        }
      }
    },
    "protoListAllRayJobsResponse": {
      "type": "object",
      "properties": {
        "jobs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protoRayJob"
          }
        }
      }
    },
    "protoListRayJobsResponse": {
      "type": "object",
      "properties": {
        "jobs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protoRayJob"
          }
        }
      }
    },
    "protoRayJob": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Required input field. Unique job name provided by user."
        },
        "namespace": {
          "type": "string",
          "title": "Required input field. job namespace provided by user"
        },
        "user": {
          "type": "string",
          "description": "Required field. This field indicates the user who owns the job."
        },
        "entrypoint": {
          "type": "string",
          "title": "The entrypoint of the RayJob"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Metadata is data to store along with this job."
        },
        "runtimeEnv": {
          "type": "string",
          "title": "RuntimeEnv is base64 encoded string which stores runtime configuration"
        },
        "jobId": {
          "type": "string",
          "description": "If jobId is not set, a new jobId will be auto-generated."
        },
        "shutdownAfterJobFinishes": {
          "type": "boolean",
          "title": "If set to true, the rayCluster will be deleted after the rayJob finishes"
        },
        "clusterSelector": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "The label selector to choose exiting clusters"
        },
        "clusterSpec": {
          "$ref": "#/definitions/protoClusterSpec",
          "title": "The cluster template"
        },
        "ttlSecondsAfterFinished": {
          "type": "integer",
          "format": "int32",
          "description": "TTLSecondsAfterFinished is the TTL to clean up RayCluster."
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Output. The time that the job created."
        },
        "deleteAt": {
          "type": "string",
          "format": "date-time",
          "description": "Output. The time that the job deleted."
        },
        "jobStatus": {
          "type": "string",
          "title": "Output. The current job status"
        },
        "jobDeploymentStatus": {
          "type": "string",
          "title": "Output. The current job deployment status"
        },
        "message": {
          "type": "string",
          "description": "Output. A human-readable description of the status of this operation."
        }
      },
      "title": "RayJob defination"
    },
    "protoVolume": {
      "type": "object",
      "properties": {
        "mountPath": {
          "type": "string"
        },
        "volumeType": {
          "$ref": "#/definitions/VolumeVolumeType"
        },
        "name": {
          "type": "string"
        },
        "source": {
          "type": "string"
        },
        "readOnly": {
          "type": "boolean"
        },
        "hostPathType": {
          "$ref": "#/definitions/VolumeHostPathType"
        },
        "mountPropagationMode": {
          "$ref": "#/definitions/VolumeMountPropagationMode"
        },
        "storageClassName": {
          "type": "string",
          "title": "If indicate ephemeral, we need to let user specify volumeClaimTemplate"
        },
        "accessMode": {
          "$ref": "#/definitions/VolumeAccessMode"
        },
        "storage": {
          "type": "string"
        }
      }
    },
    "protoWorkerGroupSpec": {
      "type": "object",
      "properties": {
        "groupName": {
          "type": "string",
          "title": "Required. Group name of the current worker group"
        },
        "computeTemplate": {
          "type": "string",
          "title": "Optional. The computeTemplate of head node group"
        },
        "image": {
          "type": "string",
          "title": "Optional field. This field will be used to retrieve right ray container"
        },
        "replicas": {
          "type": "integer",
          "format": "int32",
          "title": "Required. Desired replicas of the worker group"
        },
        "minReplicas": {
          "type": "integer",
          "format": "int32",
          "title": "Optional. Min replicas of the worker group"
        },
        "maxReplicas": {
          "type": "integer",
          "format": "int32",
          "title": "Optional. Max replicas of the worker group"
        },
        "rayStartParams": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Optional. The ray start parames of worker node group"
        },
        "volumes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protoVolume"
          },
          "title": "Optional. The volumes mount to worker pods"
        },
        "serviceAccount": {
          "type": "string",
          "title": "Optional. ServiceAccount used by worker pod\nNote that the service account has to be created prior to usage here"
        },
        "imagePullSecret": {
          "type": "string",
          "title": "Optional. image pull secret used by worker pod"
        },
        "environment": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Optional. Environment variables for worker pod"
        },
        "annotations": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Optional. Annotations for the worker pod"
        },
        "labels": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Optional. Labels for the worker pod"
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "typeUrl": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        },
        "value": {
          "type": "string",
          "format": "byte",
          "description": "Must be a valid serialized protocol buffer of the above specified type."
        }
      },
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := \u0026pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    }
  }
}
