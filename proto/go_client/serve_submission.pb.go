// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: serve_submission.proto

package go_client

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SubmitRayServeApplicationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The namespace of the cluster for the job to be created
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Required. The name of the cluster for the job
	Clustername string `protobuf:"bytes,2,opt,name=clustername,proto3" json:"clustername,omitempty"`
	// Required. Multi-application config for deploying a list of Serve applications to the Ray cluster (yaml).
	Submissionyaml *SubmissionYaml `protobuf:"bytes,3,opt,name=submissionyaml,proto3" json:"submissionyaml,omitempty"`
}

func (x *SubmitRayServeApplicationsRequest) Reset() {
	*x = SubmitRayServeApplicationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serve_submission_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitRayServeApplicationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitRayServeApplicationsRequest) ProtoMessage() {}

func (x *SubmitRayServeApplicationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_serve_submission_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitRayServeApplicationsRequest.ProtoReflect.Descriptor instead.
func (*SubmitRayServeApplicationsRequest) Descriptor() ([]byte, []int) {
	return file_serve_submission_proto_rawDescGZIP(), []int{0}
}

func (x *SubmitRayServeApplicationsRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *SubmitRayServeApplicationsRequest) GetClustername() string {
	if x != nil {
		return x.Clustername
	}
	return ""
}

func (x *SubmitRayServeApplicationsRequest) GetSubmissionyaml() *SubmissionYaml {
	if x != nil {
		return x.Submissionyaml
	}
	return nil
}

type SubmissionYaml struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. Multi-application config for deploying a list of Serve applications to the Ray cluster (yaml).
	Configyaml string `protobuf:"bytes,1,opt,name=configyaml,proto3" json:"configyaml,omitempty"`
}

func (x *SubmissionYaml) Reset() {
	*x = SubmissionYaml{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serve_submission_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmissionYaml) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmissionYaml) ProtoMessage() {}

func (x *SubmissionYaml) ProtoReflect() protoreflect.Message {
	mi := &file_serve_submission_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmissionYaml.ProtoReflect.Descriptor instead.
func (*SubmissionYaml) Descriptor() ([]byte, []int) {
	return file_serve_submission_proto_rawDescGZIP(), []int{1}
}

func (x *SubmissionYaml) GetConfigyaml() string {
	if x != nil {
		return x.Configyaml
	}
	return ""
}

type GetRayServeApplicationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The namespace of the cluster for the job
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Required. The name of the cluster for the job
	Clustername string `protobuf:"bytes,2,opt,name=clustername,proto3" json:"clustername,omitempty"`
}

func (x *GetRayServeApplicationsRequest) Reset() {
	*x = GetRayServeApplicationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serve_submission_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRayServeApplicationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRayServeApplicationsRequest) ProtoMessage() {}

func (x *GetRayServeApplicationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_serve_submission_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRayServeApplicationsRequest.ProtoReflect.Descriptor instead.
func (*GetRayServeApplicationsRequest) Descriptor() ([]byte, []int) {
	return file_serve_submission_proto_rawDescGZIP(), []int{2}
}

func (x *GetRayServeApplicationsRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *GetRayServeApplicationsRequest) GetClustername() string {
	if x != nil {
		return x.Clustername
	}
	return ""
}

// This is a reply message, so it does not have required fields
type GetRayServeApplicationReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeployMode     string                              `protobuf:"bytes,1,opt,name=deploy_mode,json=deployMode,proto3" json:"deploy_mode,omitempty"`
	ProxyLocation  string                              `protobuf:"bytes,2,opt,name=proxy_location,json=proxyLocation,proto3" json:"proxy_location,omitempty"`
	ControllerInfo *ControllerInfo                     `protobuf:"bytes,3,opt,name=controller_info,json=controllerInfo,proto3" json:"controller_info,omitempty"`
	HttpOptions    *HTTPOptions                        `protobuf:"bytes,4,opt,name=http_options,json=httpOptions,proto3" json:"http_options,omitempty"`
	GrpcOptions    *GRPCOptions                        `protobuf:"bytes,5,opt,name=grpc_options,json=grpcOptions,proto3" json:"grpc_options,omitempty"`
	Applications   map[string]*ServeApplicationDetails `protobuf:"bytes,6,rep,name=applications,proto3" json:"applications,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Proxies        map[string]*Proxy                   `protobuf:"bytes,7,rep,name=proxies,proto3" json:"proxies,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetRayServeApplicationReply) Reset() {
	*x = GetRayServeApplicationReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serve_submission_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRayServeApplicationReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRayServeApplicationReply) ProtoMessage() {}

func (x *GetRayServeApplicationReply) ProtoReflect() protoreflect.Message {
	mi := &file_serve_submission_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRayServeApplicationReply.ProtoReflect.Descriptor instead.
func (*GetRayServeApplicationReply) Descriptor() ([]byte, []int) {
	return file_serve_submission_proto_rawDescGZIP(), []int{3}
}

func (x *GetRayServeApplicationReply) GetDeployMode() string {
	if x != nil {
		return x.DeployMode
	}
	return ""
}

func (x *GetRayServeApplicationReply) GetProxyLocation() string {
	if x != nil {
		return x.ProxyLocation
	}
	return ""
}

func (x *GetRayServeApplicationReply) GetControllerInfo() *ControllerInfo {
	if x != nil {
		return x.ControllerInfo
	}
	return nil
}

func (x *GetRayServeApplicationReply) GetHttpOptions() *HTTPOptions {
	if x != nil {
		return x.HttpOptions
	}
	return nil
}

func (x *GetRayServeApplicationReply) GetGrpcOptions() *GRPCOptions {
	if x != nil {
		return x.GrpcOptions
	}
	return nil
}

func (x *GetRayServeApplicationReply) GetApplications() map[string]*ServeApplicationDetails {
	if x != nil {
		return x.Applications
	}
	return nil
}

func (x *GetRayServeApplicationReply) GetProxies() map[string]*Proxy {
	if x != nil {
		return x.Proxies
	}
	return nil
}

type DeleteRayServeApplicationsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required. The namespace of the cluster for the job
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Required. The name of the cluster for the job
	Clustername string `protobuf:"bytes,2,opt,name=clustername,proto3" json:"clustername,omitempty"`
}

func (x *DeleteRayServeApplicationsRequest) Reset() {
	*x = DeleteRayServeApplicationsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serve_submission_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRayServeApplicationsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRayServeApplicationsRequest) ProtoMessage() {}

func (x *DeleteRayServeApplicationsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_serve_submission_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRayServeApplicationsRequest.ProtoReflect.Descriptor instead.
func (*DeleteRayServeApplicationsRequest) Descriptor() ([]byte, []int) {
	return file_serve_submission_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteRayServeApplicationsRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *DeleteRayServeApplicationsRequest) GetClustername() string {
	if x != nil {
		return x.Clustername
	}
	return ""
}

type ControllerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId      string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	NodeIp      string `protobuf:"bytes,2,opt,name=node_ip,json=nodeIp,proto3" json:"node_ip,omitempty"`
	ActorId     string `protobuf:"bytes,3,opt,name=actor_id,json=actorId,proto3" json:"actor_id,omitempty"`
	ActorName   string `protobuf:"bytes,4,opt,name=actor_name,json=actorName,proto3" json:"actor_name,omitempty"`
	WorkerId    string `protobuf:"bytes,5,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
	LogFilePath string `protobuf:"bytes,6,opt,name=log_file_path,json=logFilePath,proto3" json:"log_file_path,omitempty"`
}

func (x *ControllerInfo) Reset() {
	*x = ControllerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serve_submission_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControllerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControllerInfo) ProtoMessage() {}

func (x *ControllerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_serve_submission_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControllerInfo.ProtoReflect.Descriptor instead.
func (*ControllerInfo) Descriptor() ([]byte, []int) {
	return file_serve_submission_proto_rawDescGZIP(), []int{5}
}

func (x *ControllerInfo) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *ControllerInfo) GetNodeIp() string {
	if x != nil {
		return x.NodeIp
	}
	return ""
}

func (x *ControllerInfo) GetActorId() string {
	if x != nil {
		return x.ActorId
	}
	return ""
}

func (x *ControllerInfo) GetActorName() string {
	if x != nil {
		return x.ActorName
	}
	return ""
}

func (x *ControllerInfo) GetWorkerId() string {
	if x != nil {
		return x.WorkerId
	}
	return ""
}

func (x *ControllerInfo) GetLogFilePath() string {
	if x != nil {
		return x.LogFilePath
	}
	return ""
}

type HTTPOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host              string  `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Port              int32   `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	RootPath          string  `protobuf:"bytes,3,opt,name=root_path,json=rootPath,proto3" json:"root_path,omitempty"`
	RequestTimeoutS   float32 `protobuf:"fixed32,4,opt,name=request_timeout_s,json=requestTimeoutS,proto3" json:"request_timeout_s,omitempty"`
	KeepAliveTimeoutS int32   `protobuf:"varint,5,opt,name=keep_alive_timeout_s,json=keepAliveTimeoutS,proto3" json:"keep_alive_timeout_s,omitempty"`
}

func (x *HTTPOptions) Reset() {
	*x = HTTPOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serve_submission_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPOptions) ProtoMessage() {}

func (x *HTTPOptions) ProtoReflect() protoreflect.Message {
	mi := &file_serve_submission_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPOptions.ProtoReflect.Descriptor instead.
func (*HTTPOptions) Descriptor() ([]byte, []int) {
	return file_serve_submission_proto_rawDescGZIP(), []int{6}
}

func (x *HTTPOptions) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *HTTPOptions) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *HTTPOptions) GetRootPath() string {
	if x != nil {
		return x.RootPath
	}
	return ""
}

func (x *HTTPOptions) GetRequestTimeoutS() float32 {
	if x != nil {
		return x.RequestTimeoutS
	}
	return 0
}

func (x *HTTPOptions) GetKeepAliveTimeoutS() int32 {
	if x != nil {
		return x.KeepAliveTimeoutS
	}
	return 0
}

type GRPCOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Port                  int32    `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
	GrpcServicerFunctions []string `protobuf:"bytes,2,rep,name=grpc_servicer_functions,json=grpcServicerFunctions,proto3" json:"grpc_servicer_functions,omitempty"`
}

func (x *GRPCOptions) Reset() {
	*x = GRPCOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serve_submission_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GRPCOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GRPCOptions) ProtoMessage() {}

func (x *GRPCOptions) ProtoReflect() protoreflect.Message {
	mi := &file_serve_submission_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GRPCOptions.ProtoReflect.Descriptor instead.
func (*GRPCOptions) Descriptor() ([]byte, []int) {
	return file_serve_submission_proto_rawDescGZIP(), []int{7}
}

func (x *GRPCOptions) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *GRPCOptions) GetGrpcServicerFunctions() []string {
	if x != nil {
		return x.GrpcServicerFunctions
	}
	return nil
}

type Proxy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId      string `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	NodeIp      string `protobuf:"bytes,2,opt,name=node_ip,json=nodeIp,proto3" json:"node_ip,omitempty"`
	ActorId     string `protobuf:"bytes,3,opt,name=actor_id,json=actorId,proto3" json:"actor_id,omitempty"`
	ActorName   string `protobuf:"bytes,4,opt,name=actor_name,json=actorName,proto3" json:"actor_name,omitempty"`
	WorkerId    string `protobuf:"bytes,5,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
	Status      string `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	LogFilePath string `protobuf:"bytes,7,opt,name=log_file_path,json=logFilePath,proto3" json:"log_file_path,omitempty"`
}

func (x *Proxy) Reset() {
	*x = Proxy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serve_submission_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Proxy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Proxy) ProtoMessage() {}

func (x *Proxy) ProtoReflect() protoreflect.Message {
	mi := &file_serve_submission_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Proxy.ProtoReflect.Descriptor instead.
func (*Proxy) Descriptor() ([]byte, []int) {
	return file_serve_submission_proto_rawDescGZIP(), []int{8}
}

func (x *Proxy) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *Proxy) GetNodeIp() string {
	if x != nil {
		return x.NodeIp
	}
	return ""
}

func (x *Proxy) GetActorId() string {
	if x != nil {
		return x.ActorId
	}
	return ""
}

func (x *Proxy) GetActorName() string {
	if x != nil {
		return x.ActorName
	}
	return ""
}

func (x *Proxy) GetWorkerId() string {
	if x != nil {
		return x.WorkerId
	}
	return ""
}

func (x *Proxy) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Proxy) GetLogFilePath() string {
	if x != nil {
		return x.LogFilePath
	}
	return ""
}

type Replica struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId      string  `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	NodeIp      string  `protobuf:"bytes,2,opt,name=node_ip,json=nodeIp,proto3" json:"node_ip,omitempty"`
	ActorId     string  `protobuf:"bytes,3,opt,name=actor_id,json=actorId,proto3" json:"actor_id,omitempty"`
	ActorName   string  `protobuf:"bytes,4,opt,name=actor_name,json=actorName,proto3" json:"actor_name,omitempty"`
	WorkerId    string  `protobuf:"bytes,5,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
	State       string  `protobuf:"bytes,6,opt,name=state,proto3" json:"state,omitempty"`
	LogFilePath string  `protobuf:"bytes,7,opt,name=log_file_path,json=logFilePath,proto3" json:"log_file_path,omitempty"`
	ReplicaId   string  `protobuf:"bytes,8,opt,name=replica_id,json=replicaId,proto3" json:"replica_id,omitempty"`
	Pid         int32   `protobuf:"varint,9,opt,name=pid,proto3" json:"pid,omitempty"`
	StartTimeS  float32 `protobuf:"fixed32,10,opt,name=start_time_s,json=startTimeS,proto3" json:"start_time_s,omitempty"`
}

func (x *Replica) Reset() {
	*x = Replica{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serve_submission_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Replica) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Replica) ProtoMessage() {}

func (x *Replica) ProtoReflect() protoreflect.Message {
	mi := &file_serve_submission_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Replica.ProtoReflect.Descriptor instead.
func (*Replica) Descriptor() ([]byte, []int) {
	return file_serve_submission_proto_rawDescGZIP(), []int{9}
}

func (x *Replica) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *Replica) GetNodeIp() string {
	if x != nil {
		return x.NodeIp
	}
	return ""
}

func (x *Replica) GetActorId() string {
	if x != nil {
		return x.ActorId
	}
	return ""
}

func (x *Replica) GetActorName() string {
	if x != nil {
		return x.ActorName
	}
	return ""
}

func (x *Replica) GetWorkerId() string {
	if x != nil {
		return x.WorkerId
	}
	return ""
}

func (x *Replica) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *Replica) GetLogFilePath() string {
	if x != nil {
		return x.LogFilePath
	}
	return ""
}

func (x *Replica) GetReplicaId() string {
	if x != nil {
		return x.ReplicaId
	}
	return ""
}

func (x *Replica) GetPid() int32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *Replica) GetStartTimeS() float32 {
	if x != nil {
		return x.StartTimeS
	}
	return 0
}

type PlacementGroupBundle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bundle map[string]float32 `protobuf:"bytes,1,rep,name=bundle,proto3" json:"bundle,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
}

func (x *PlacementGroupBundle) Reset() {
	*x = PlacementGroupBundle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serve_submission_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlacementGroupBundle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlacementGroupBundle) ProtoMessage() {}

func (x *PlacementGroupBundle) ProtoReflect() protoreflect.Message {
	mi := &file_serve_submission_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlacementGroupBundle.ProtoReflect.Descriptor instead.
func (*PlacementGroupBundle) Descriptor() ([]byte, []int) {
	return file_serve_submission_proto_rawDescGZIP(), []int{10}
}

func (x *PlacementGroupBundle) GetBundle() map[string]float32 {
	if x != nil {
		return x.Bundle
	}
	return nil
}

type DeploymentSchema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                      string                  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	PlacementGroupStrategy    string                  `protobuf:"bytes,3,opt,name=placement_group_strategy,json=placementGroupStrategy,proto3" json:"placement_group_strategy,omitempty"`
	PlacementGroupBundles     []*PlacementGroupBundle `protobuf:"bytes,4,rep,name=placement_group_bundles,json=placementGroupBundles,proto3" json:"placement_group_bundles,omitempty"`
	NumReplicas               int32                   `protobuf:"varint,5,opt,name=num_replicas,json=numReplicas,proto3" json:"num_replicas,omitempty"`
	MaxReplicasPerNode        int32                   `protobuf:"varint,6,opt,name=max_replicas_per_node,json=maxReplicasPerNode,proto3" json:"max_replicas_per_node,omitempty"`
	MaxConcurrentQueries      int32                   `protobuf:"varint,7,opt,name=max_concurrent_queries,json=maxConcurrentQueries,proto3" json:"max_concurrent_queries,omitempty"`
	UserConfig                map[string]string       `protobuf:"bytes,8,rep,name=user_config,json=userConfig,proto3" json:"user_config,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AutoscalingConfig         map[string]string       `protobuf:"bytes,9,rep,name=autoscaling_config,json=autoscalingConfig,proto3" json:"autoscaling_config,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	GracefulShutdownWaitLoopS float32                 `protobuf:"fixed32,10,opt,name=graceful_shutdown_wait_loop_s,json=gracefulShutdownWaitLoopS,proto3" json:"graceful_shutdown_wait_loop_s,omitempty"`
	GracefulShutdownTimeoutS  float32                 `protobuf:"fixed32,11,opt,name=graceful_shutdown_timeout_s,json=gracefulShutdownTimeoutS,proto3" json:"graceful_shutdown_timeout_s,omitempty"`
	HealthCheckPeriodS        float32                 `protobuf:"fixed32,12,opt,name=health_check_period_s,json=healthCheckPeriodS,proto3" json:"health_check_period_s,omitempty"`
	HealthCheckTimeoutS       float32                 `protobuf:"fixed32,13,opt,name=health_check_timeout_s,json=healthCheckTimeoutS,proto3" json:"health_check_timeout_s,omitempty"`
	RayActorOptions           *RayActorOptionSpec     `protobuf:"bytes,14,opt,name=ray_actor_options,json=rayActorOptions,proto3" json:"ray_actor_options,omitempty"`
}

func (x *DeploymentSchema) Reset() {
	*x = DeploymentSchema{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serve_submission_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeploymentSchema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentSchema) ProtoMessage() {}

func (x *DeploymentSchema) ProtoReflect() protoreflect.Message {
	mi := &file_serve_submission_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentSchema.ProtoReflect.Descriptor instead.
func (*DeploymentSchema) Descriptor() ([]byte, []int) {
	return file_serve_submission_proto_rawDescGZIP(), []int{11}
}

func (x *DeploymentSchema) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeploymentSchema) GetPlacementGroupStrategy() string {
	if x != nil {
		return x.PlacementGroupStrategy
	}
	return ""
}

func (x *DeploymentSchema) GetPlacementGroupBundles() []*PlacementGroupBundle {
	if x != nil {
		return x.PlacementGroupBundles
	}
	return nil
}

func (x *DeploymentSchema) GetNumReplicas() int32 {
	if x != nil {
		return x.NumReplicas
	}
	return 0
}

func (x *DeploymentSchema) GetMaxReplicasPerNode() int32 {
	if x != nil {
		return x.MaxReplicasPerNode
	}
	return 0
}

func (x *DeploymentSchema) GetMaxConcurrentQueries() int32 {
	if x != nil {
		return x.MaxConcurrentQueries
	}
	return 0
}

func (x *DeploymentSchema) GetUserConfig() map[string]string {
	if x != nil {
		return x.UserConfig
	}
	return nil
}

func (x *DeploymentSchema) GetAutoscalingConfig() map[string]string {
	if x != nil {
		return x.AutoscalingConfig
	}
	return nil
}

func (x *DeploymentSchema) GetGracefulShutdownWaitLoopS() float32 {
	if x != nil {
		return x.GracefulShutdownWaitLoopS
	}
	return 0
}

func (x *DeploymentSchema) GetGracefulShutdownTimeoutS() float32 {
	if x != nil {
		return x.GracefulShutdownTimeoutS
	}
	return 0
}

func (x *DeploymentSchema) GetHealthCheckPeriodS() float32 {
	if x != nil {
		return x.HealthCheckPeriodS
	}
	return 0
}

func (x *DeploymentSchema) GetHealthCheckTimeoutS() float32 {
	if x != nil {
		return x.HealthCheckTimeoutS
	}
	return 0
}

func (x *DeploymentSchema) GetRayActorOptions() *RayActorOptionSpec {
	if x != nil {
		return x.RayActorOptions
	}
	return nil
}

type DeploymentApplicationDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name             string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Status           string            `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	Message          string            `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	DeploymentConfig *DeploymentSchema `protobuf:"bytes,4,opt,name=deployment_config,json=deploymentConfig,proto3" json:"deployment_config,omitempty"`
	Replicas         []*Replica        `protobuf:"bytes,5,rep,name=replicas,proto3" json:"replicas,omitempty"`
}

func (x *DeploymentApplicationDetails) Reset() {
	*x = DeploymentApplicationDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serve_submission_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeploymentApplicationDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentApplicationDetails) ProtoMessage() {}

func (x *DeploymentApplicationDetails) ProtoReflect() protoreflect.Message {
	mi := &file_serve_submission_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentApplicationDetails.ProtoReflect.Descriptor instead.
func (*DeploymentApplicationDetails) Descriptor() ([]byte, []int) {
	return file_serve_submission_proto_rawDescGZIP(), []int{12}
}

func (x *DeploymentApplicationDetails) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeploymentApplicationDetails) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *DeploymentApplicationDetails) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DeploymentApplicationDetails) GetDeploymentConfig() *DeploymentSchema {
	if x != nil {
		return x.DeploymentConfig
	}
	return nil
}

func (x *DeploymentApplicationDetails) GetReplicas() []*Replica {
	if x != nil {
		return x.Replicas
	}
	return nil
}

type ServeApplicationDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name              string                                   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Status            string                                   `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	Message           string                                   `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	RoutePrefix       string                                   `protobuf:"bytes,4,opt,name=route_prefix,json=routePrefix,proto3" json:"route_prefix,omitempty"`
	DocsPath          string                                   `protobuf:"bytes,5,opt,name=docs_path,json=docsPath,proto3" json:"docs_path,omitempty"`
	LastDeployedTimeS float32                                  `protobuf:"fixed32,6,opt,name=last_deployed_time_s,json=lastDeployedTimeS,proto3" json:"last_deployed_time_s,omitempty"`
	Deployments       map[string]*DeploymentApplicationDetails `protobuf:"bytes,7,rep,name=deployments,proto3" json:"deployments,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DeployedAppConfig *ServeDeploymentDetails                  `protobuf:"bytes,8,opt,name=deployed_app_config,json=deployedAppConfig,proto3" json:"deployed_app_config,omitempty"`
}

func (x *ServeApplicationDetails) Reset() {
	*x = ServeApplicationDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serve_submission_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServeApplicationDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServeApplicationDetails) ProtoMessage() {}

func (x *ServeApplicationDetails) ProtoReflect() protoreflect.Message {
	mi := &file_serve_submission_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServeApplicationDetails.ProtoReflect.Descriptor instead.
func (*ServeApplicationDetails) Descriptor() ([]byte, []int) {
	return file_serve_submission_proto_rawDescGZIP(), []int{13}
}

func (x *ServeApplicationDetails) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ServeApplicationDetails) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ServeApplicationDetails) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ServeApplicationDetails) GetRoutePrefix() string {
	if x != nil {
		return x.RoutePrefix
	}
	return ""
}

func (x *ServeApplicationDetails) GetDocsPath() string {
	if x != nil {
		return x.DocsPath
	}
	return ""
}

func (x *ServeApplicationDetails) GetLastDeployedTimeS() float32 {
	if x != nil {
		return x.LastDeployedTimeS
	}
	return 0
}

func (x *ServeApplicationDetails) GetDeployments() map[string]*DeploymentApplicationDetails {
	if x != nil {
		return x.Deployments
	}
	return nil
}

func (x *ServeApplicationDetails) GetDeployedAppConfig() *ServeDeploymentDetails {
	if x != nil {
		return x.DeployedAppConfig
	}
	return nil
}

type RayActorOptionSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RuntimeEnv        map[string]string `protobuf:"bytes,1,rep,name=runtime_env,json=runtimeEnv,proto3" json:"runtime_env,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	NumCpus           float32           `protobuf:"fixed32,2,opt,name=num_cpus,json=numCpus,proto3" json:"num_cpus,omitempty"`
	NumGpus           float32           `protobuf:"fixed32,3,opt,name=num_gpus,json=numGpus,proto3" json:"num_gpus,omitempty"`
	Memory            uint64            `protobuf:"varint,4,opt,name=memory,proto3" json:"memory,omitempty"`
	ObjectStoreMemory uint64            `protobuf:"varint,5,opt,name=object_store_memory,json=objectStoreMemory,proto3" json:"object_store_memory,omitempty"`
	Resources         map[string]string `protobuf:"bytes,6,rep,name=resources,proto3" json:"resources,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AcceleratorType   string            `protobuf:"bytes,7,opt,name=accelerator_type,json=acceleratorType,proto3" json:"accelerator_type,omitempty"`
}

func (x *RayActorOptionSpec) Reset() {
	*x = RayActorOptionSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serve_submission_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RayActorOptionSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RayActorOptionSpec) ProtoMessage() {}

func (x *RayActorOptionSpec) ProtoReflect() protoreflect.Message {
	mi := &file_serve_submission_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RayActorOptionSpec.ProtoReflect.Descriptor instead.
func (*RayActorOptionSpec) Descriptor() ([]byte, []int) {
	return file_serve_submission_proto_rawDescGZIP(), []int{14}
}

func (x *RayActorOptionSpec) GetRuntimeEnv() map[string]string {
	if x != nil {
		return x.RuntimeEnv
	}
	return nil
}

func (x *RayActorOptionSpec) GetNumCpus() float32 {
	if x != nil {
		return x.NumCpus
	}
	return 0
}

func (x *RayActorOptionSpec) GetNumGpus() float32 {
	if x != nil {
		return x.NumGpus
	}
	return 0
}

func (x *RayActorOptionSpec) GetMemory() uint64 {
	if x != nil {
		return x.Memory
	}
	return 0
}

func (x *RayActorOptionSpec) GetObjectStoreMemory() uint64 {
	if x != nil {
		return x.ObjectStoreMemory
	}
	return 0
}

func (x *RayActorOptionSpec) GetResources() map[string]string {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *RayActorOptionSpec) GetAcceleratorType() string {
	if x != nil {
		return x.AcceleratorType
	}
	return ""
}

type ServeDeploymentDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string              `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Host        string              `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	Port        int32               `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	RoutePrefix string              `protobuf:"bytes,4,opt,name=route_prefix,json=routePrefix,proto3" json:"route_prefix,omitempty"`
	Args        map[string]string   `protobuf:"bytes,5,rep,name=args,proto3" json:"args,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ImportPath  string              `protobuf:"bytes,6,opt,name=import_path,json=importPath,proto3" json:"import_path,omitempty"`
	RuntimeEnv  map[string]string   `protobuf:"bytes,7,rep,name=runtime_env,json=runtimeEnv,proto3" json:"runtime_env,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Deployments []*DeploymentSchema `protobuf:"bytes,8,rep,name=deployments,proto3" json:"deployments,omitempty"`
}

func (x *ServeDeploymentDetails) Reset() {
	*x = ServeDeploymentDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_serve_submission_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServeDeploymentDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServeDeploymentDetails) ProtoMessage() {}

func (x *ServeDeploymentDetails) ProtoReflect() protoreflect.Message {
	mi := &file_serve_submission_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServeDeploymentDetails.ProtoReflect.Descriptor instead.
func (*ServeDeploymentDetails) Descriptor() ([]byte, []int) {
	return file_serve_submission_proto_rawDescGZIP(), []int{15}
}

func (x *ServeDeploymentDetails) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ServeDeploymentDetails) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *ServeDeploymentDetails) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *ServeDeploymentDetails) GetRoutePrefix() string {
	if x != nil {
		return x.RoutePrefix
	}
	return ""
}

func (x *ServeDeploymentDetails) GetArgs() map[string]string {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *ServeDeploymentDetails) GetImportPath() string {
	if x != nil {
		return x.ImportPath
	}
	return ""
}

func (x *ServeDeploymentDetails) GetRuntimeEnv() map[string]string {
	if x != nil {
		return x.RuntimeEnv
	}
	return nil
}

func (x *ServeDeploymentDetails) GetDeployments() []*DeploymentSchema {
	if x != nil {
		return x.Deployments
	}
	return nil
}

var File_serve_submission_proto protoreflect.FileDescriptor

var file_serve_submission_proto_rawDesc = []byte{
	0x0a, 0x16, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76,
	0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb1, 0x01, 0x0a, 0x21,
	0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x52, 0x61, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x21, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b,
	0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0e, 0x73,
	0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x79, 0x61, 0x6d, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x59, 0x61, 0x6d, 0x6c, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x0e, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x79, 0x61, 0x6d, 0x6c, 0x22,
	0x35, 0x0a, 0x0e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x59, 0x61, 0x6d,
	0x6c, 0x12, 0x23, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x79, 0x61, 0x6d, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x79, 0x61, 0x6d, 0x6c, 0x22, 0x6a, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x52, 0x61, 0x79,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02,
	0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0b, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0xe3, 0x04, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x52, 0x61, 0x79, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x35, 0x0a, 0x0c, 0x68, 0x74,
	0x74, 0x70, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x54, 0x54, 0x50, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x68, 0x74, 0x74, 0x70, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x35, 0x0a, 0x0c, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x47, 0x52, 0x50, 0x43, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0b, 0x67, 0x72, 0x70,
	0x63, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x58, 0x0a, 0x0c, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x61, 0x79, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x49, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x52,
	0x61, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x73, 0x1a, 0x5f, 0x0a,
	0x11, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x48,
	0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x78, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x22, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x6d, 0x0a, 0x21, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x61, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x12, 0x25, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xbd, 0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64,
	0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x70, 0x12, 0x19, 0x0a, 0x08,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x6f, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x46,
	0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x22, 0xaf, 0x01, 0x0a, 0x0b, 0x48, 0x54, 0x54, 0x50,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x2a, 0x0a, 0x11,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x12, 0x2f, 0x0a, 0x14, 0x6b, 0x65, 0x65, 0x70,
	0x5f, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x6b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x22, 0x59, 0x0a, 0x0b, 0x47, 0x52, 0x50,
	0x43, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x36, 0x0a, 0x17,
	0x67, 0x72, 0x70, 0x63, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x72, 0x5f, 0x66, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x67,
	0x72, 0x70, 0x63, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x72, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0xcc, 0x01, 0x0a, 0x05, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x17,
	0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x70,
	0x12, 0x19, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x77,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x22, 0x0a, 0x0d, 0x6c, 0x6f, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x50,
	0x61, 0x74, 0x68, 0x22, 0x9f, 0x02, 0x0a, 0x07, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x12,
	0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49,
	0x70, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x77,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x22,
	0x0a, 0x0d, 0x6c, 0x6f, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x5f, 0x69, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x49,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03,
	0x70, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x53, 0x22, 0x92, 0x01, 0x0a, 0x14, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x3f,
	0x0a, 0x06, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x2e, 0x42, 0x75, 0x6e, 0x64,
	0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x1a,
	0x39, 0x0a, 0x0b, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9f, 0x07, 0x0a, 0x10, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x53, 0x0a,
	0x17, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x15, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x75, 0x6e, 0x64, 0x6c,
	0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x31, 0x0a, 0x15, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x73, 0x50, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x6d, 0x61, 0x78, 0x5f,
	0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x6e,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x51, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x48,
	0x0a, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x75, 0x73,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x5d, 0x0a, 0x12, 0x61, 0x75, 0x74, 0x6f,
	0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x41, 0x75,
	0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x11, 0x61, 0x75, 0x74, 0x6f, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x40, 0x0a, 0x1d, 0x67, 0x72, 0x61, 0x63, 0x65,
	0x66, 0x75, 0x6c, 0x5f, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x77, 0x61, 0x69,
	0x74, 0x5f, 0x6c, 0x6f, 0x6f, 0x70, 0x5f, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x19,
	0x67, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e,
	0x57, 0x61, 0x69, 0x74, 0x4c, 0x6f, 0x6f, 0x70, 0x53, 0x12, 0x3d, 0x0a, 0x1b, 0x67, 0x72, 0x61,
	0x63, 0x65, 0x66, 0x75, 0x6c, 0x5f, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x18,
	0x67, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x12, 0x31, 0x0a, 0x15, 0x68, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f,
	0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x12, 0x33, 0x0a, 0x16, 0x68,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x5f, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x68, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53,
	0x12, 0x45, 0x0a, 0x11, 0x72, 0x61, 0x79, 0x5f, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x79, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0f, 0x72, 0x61, 0x79, 0x41, 0x63, 0x74, 0x6f, 0x72,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x44, 0x0a, 0x16, 0x41, 0x75, 0x74, 0x6f, 0x73, 0x63,
	0x61, 0x6c, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd6, 0x01, 0x0a,
	0x1c, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x44, 0x0a, 0x11, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x10, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2a, 0x0a, 0x08, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x52, 0x08, 0x72, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x73, 0x22, 0xd7, 0x03, 0x0a, 0x17, 0x53, 0x65, 0x72, 0x76, 0x65, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x6f,
	0x63, 0x73, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64,
	0x6f, 0x63, 0x73, 0x50, 0x61, 0x74, 0x68, 0x12, 0x2f, 0x0a, 0x14, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x12, 0x51, 0x0a, 0x0b, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x4d, 0x0a, 0x13, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x64, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x11, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x65,
	0x64, 0x41, 0x70, 0x70, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x63, 0x0a, 0x10, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x39, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xce, 0x03, 0x0a, 0x12, 0x52, 0x61, 0x79, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x12, 0x4a, 0x0a, 0x0b, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x65, 0x6e, 0x76, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x79, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e,
	0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x45,
	0x6e, 0x76, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x70, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x6e, 0x75, 0x6d, 0x43, 0x70, 0x75, 0x73, 0x12, 0x19, 0x0a,
	0x08, 0x6e, 0x75, 0x6d, 0x5f, 0x67, 0x70, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x07, 0x6e, 0x75, 0x6d, 0x47, 0x70, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x12, 0x2e, 0x0a, 0x13, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x12, 0x46, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x61, 0x79, 0x41,
	0x63, 0x74, 0x6f, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x63, 0x63, 0x65,
	0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x61, 0x63, 0x63, 0x65, 0x6c, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x1a, 0x3d, 0x0a, 0x0f, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e,
	0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xd8, 0x03, 0x0a, 0x16, 0x53, 0x65, 0x72, 0x76, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68,
	0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x3b, 0x0a, 0x04, 0x61, 0x72,
	0x67, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x4e, 0x0a, 0x0b, 0x72, 0x75, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x65, 0x6e, 0x76, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x52, 0x75, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x72, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x76, 0x12, 0x39, 0x0a, 0x0b, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x0b, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x1a, 0x37, 0x0a, 0x09, 0x41, 0x72, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3d, 0x0a, 0x0f,
	0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x32, 0xa6, 0x04, 0x0a, 0x19,
	0x52, 0x61, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xb3, 0x01, 0x0a, 0x17, 0x53, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x52, 0x61, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x56, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x50, 0x22,
	0x3e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x7d,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x3a,
	0x0e, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x79, 0x61, 0x6d, 0x6c, 0x12,
	0xa9, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x47, 0x65, 0x74, 0x52, 0x61, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x61, 0x79, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x46, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x40, 0x12, 0x3e, 0x2f, 0x61, 0x70,
	0x69, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73,
	0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x7d, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x12, 0xa6, 0x01, 0x0a, 0x1a,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x61, 0x79, 0x53, 0x65, 0x72, 0x76, 0x65, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x28, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x61, 0x79, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x46, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x40, 0x2a, 0x3e, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x7d, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x7d, 0x42, 0x54, 0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x72, 0x61, 0x79, 0x2d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x6b,
	0x75, 0x62, 0x65, 0x72, 0x61, 0x79, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x5f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x92, 0x41, 0x21, 0x2a, 0x01, 0x01, 0x52, 0x1c, 0x0a, 0x07,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x11, 0x12, 0x0f, 0x0a, 0x0d, 0x1a, 0x0b, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_serve_submission_proto_rawDescOnce sync.Once
	file_serve_submission_proto_rawDescData = file_serve_submission_proto_rawDesc
)

func file_serve_submission_proto_rawDescGZIP() []byte {
	file_serve_submission_proto_rawDescOnce.Do(func() {
		file_serve_submission_proto_rawDescData = protoimpl.X.CompressGZIP(file_serve_submission_proto_rawDescData)
	})
	return file_serve_submission_proto_rawDescData
}

var file_serve_submission_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_serve_submission_proto_goTypes = []interface{}{
	(*SubmitRayServeApplicationsRequest)(nil), // 0: proto.SubmitRayServeApplicationsRequest
	(*SubmissionYaml)(nil),                    // 1: proto.SubmissionYaml
	(*GetRayServeApplicationsRequest)(nil),    // 2: proto.GetRayServeApplicationsRequest
	(*GetRayServeApplicationReply)(nil),       // 3: proto.GetRayServeApplicationReply
	(*DeleteRayServeApplicationsRequest)(nil), // 4: proto.DeleteRayServeApplicationsRequest
	(*ControllerInfo)(nil),                    // 5: proto.ControllerInfo
	(*HTTPOptions)(nil),                       // 6: proto.HTTPOptions
	(*GRPCOptions)(nil),                       // 7: proto.GRPCOptions
	(*Proxy)(nil),                             // 8: proto.Proxy
	(*Replica)(nil),                           // 9: proto.Replica
	(*PlacementGroupBundle)(nil),              // 10: proto.PlacementGroupBundle
	(*DeploymentSchema)(nil),                  // 11: proto.DeploymentSchema
	(*DeploymentApplicationDetails)(nil),      // 12: proto.DeploymentApplicationDetails
	(*ServeApplicationDetails)(nil),           // 13: proto.ServeApplicationDetails
	(*RayActorOptionSpec)(nil),                // 14: proto.RayActorOptionSpec
	(*ServeDeploymentDetails)(nil),            // 15: proto.ServeDeploymentDetails
	nil,                                       // 16: proto.GetRayServeApplicationReply.ApplicationsEntry
	nil,                                       // 17: proto.GetRayServeApplicationReply.ProxiesEntry
	nil,                                       // 18: proto.PlacementGroupBundle.BundleEntry
	nil,                                       // 19: proto.DeploymentSchema.UserConfigEntry
	nil,                                       // 20: proto.DeploymentSchema.AutoscalingConfigEntry
	nil,                                       // 21: proto.ServeApplicationDetails.DeploymentsEntry
	nil,                                       // 22: proto.RayActorOptionSpec.RuntimeEnvEntry
	nil,                                       // 23: proto.RayActorOptionSpec.ResourcesEntry
	nil,                                       // 24: proto.ServeDeploymentDetails.ArgsEntry
	nil,                                       // 25: proto.ServeDeploymentDetails.RuntimeEnvEntry
	(*emptypb.Empty)(nil),                     // 26: google.protobuf.Empty
}
var file_serve_submission_proto_depIdxs = []int32{
	1,  // 0: proto.SubmitRayServeApplicationsRequest.submissionyaml:type_name -> proto.SubmissionYaml
	5,  // 1: proto.GetRayServeApplicationReply.controller_info:type_name -> proto.ControllerInfo
	6,  // 2: proto.GetRayServeApplicationReply.http_options:type_name -> proto.HTTPOptions
	7,  // 3: proto.GetRayServeApplicationReply.grpc_options:type_name -> proto.GRPCOptions
	16, // 4: proto.GetRayServeApplicationReply.applications:type_name -> proto.GetRayServeApplicationReply.ApplicationsEntry
	17, // 5: proto.GetRayServeApplicationReply.proxies:type_name -> proto.GetRayServeApplicationReply.ProxiesEntry
	18, // 6: proto.PlacementGroupBundle.bundle:type_name -> proto.PlacementGroupBundle.BundleEntry
	10, // 7: proto.DeploymentSchema.placement_group_bundles:type_name -> proto.PlacementGroupBundle
	19, // 8: proto.DeploymentSchema.user_config:type_name -> proto.DeploymentSchema.UserConfigEntry
	20, // 9: proto.DeploymentSchema.autoscaling_config:type_name -> proto.DeploymentSchema.AutoscalingConfigEntry
	14, // 10: proto.DeploymentSchema.ray_actor_options:type_name -> proto.RayActorOptionSpec
	11, // 11: proto.DeploymentApplicationDetails.deployment_config:type_name -> proto.DeploymentSchema
	9,  // 12: proto.DeploymentApplicationDetails.replicas:type_name -> proto.Replica
	21, // 13: proto.ServeApplicationDetails.deployments:type_name -> proto.ServeApplicationDetails.DeploymentsEntry
	15, // 14: proto.ServeApplicationDetails.deployed_app_config:type_name -> proto.ServeDeploymentDetails
	22, // 15: proto.RayActorOptionSpec.runtime_env:type_name -> proto.RayActorOptionSpec.RuntimeEnvEntry
	23, // 16: proto.RayActorOptionSpec.resources:type_name -> proto.RayActorOptionSpec.ResourcesEntry
	24, // 17: proto.ServeDeploymentDetails.args:type_name -> proto.ServeDeploymentDetails.ArgsEntry
	25, // 18: proto.ServeDeploymentDetails.runtime_env:type_name -> proto.ServeDeploymentDetails.RuntimeEnvEntry
	11, // 19: proto.ServeDeploymentDetails.deployments:type_name -> proto.DeploymentSchema
	13, // 20: proto.GetRayServeApplicationReply.ApplicationsEntry.value:type_name -> proto.ServeApplicationDetails
	8,  // 21: proto.GetRayServeApplicationReply.ProxiesEntry.value:type_name -> proto.Proxy
	12, // 22: proto.ServeApplicationDetails.DeploymentsEntry.value:type_name -> proto.DeploymentApplicationDetails
	0,  // 23: proto.RayServeSubmissionService.SubmitServeApplications:input_type -> proto.SubmitRayServeApplicationsRequest
	2,  // 24: proto.RayServeSubmissionService.GetServeApplications:input_type -> proto.GetRayServeApplicationsRequest
	4,  // 25: proto.RayServeSubmissionService.DeleteRayServeApplications:input_type -> proto.DeleteRayServeApplicationsRequest
	26, // 26: proto.RayServeSubmissionService.SubmitServeApplications:output_type -> google.protobuf.Empty
	3,  // 27: proto.RayServeSubmissionService.GetServeApplications:output_type -> proto.GetRayServeApplicationReply
	26, // 28: proto.RayServeSubmissionService.DeleteRayServeApplications:output_type -> google.protobuf.Empty
	26, // [26:29] is the sub-list for method output_type
	23, // [23:26] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_serve_submission_proto_init() }
func file_serve_submission_proto_init() {
	if File_serve_submission_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_serve_submission_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitRayServeApplicationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serve_submission_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmissionYaml); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serve_submission_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRayServeApplicationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serve_submission_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRayServeApplicationReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serve_submission_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRayServeApplicationsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serve_submission_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ControllerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serve_submission_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serve_submission_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GRPCOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serve_submission_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Proxy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serve_submission_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Replica); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serve_submission_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlacementGroupBundle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serve_submission_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeploymentSchema); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serve_submission_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeploymentApplicationDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serve_submission_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServeApplicationDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serve_submission_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RayActorOptionSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_serve_submission_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServeDeploymentDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_serve_submission_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_serve_submission_proto_goTypes,
		DependencyIndexes: file_serve_submission_proto_depIdxs,
		MessageInfos:      file_serve_submission_proto_msgTypes,
	}.Build()
	File_serve_submission_proto = out.File
	file_serve_submission_proto_rawDesc = nil
	file_serve_submission_proto_goTypes = nil
	file_serve_submission_proto_depIdxs = nil
}
