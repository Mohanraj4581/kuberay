// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package go_client

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RayServeSubmissionServiceClient is the client API for RayServeSubmissionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RayServeSubmissionServiceClient interface {
	// Submit a new Ray Serve Application on the specified cluster in a namespace.
	SubmitServeApplications(ctx context.Context, in *SubmitRayServeApplicationsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Get Serve applications for a given cluster in a namespace.
	GetServeApplications(ctx context.Context, in *GetRayServeApplicationsRequest, opts ...grpc.CallOption) (*GetRayServeApplicationReply, error)
	// Shuts down Serve and all applications running on a given cluster in a namespace..
	DeleteRayServeApplications(ctx context.Context, in *DeleteRayServeApplicationsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type rayServeSubmissionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRayServeSubmissionServiceClient(cc grpc.ClientConnInterface) RayServeSubmissionServiceClient {
	return &rayServeSubmissionServiceClient{cc}
}

func (c *rayServeSubmissionServiceClient) SubmitServeApplications(ctx context.Context, in *SubmitRayServeApplicationsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.RayServeSubmissionService/SubmitServeApplications", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rayServeSubmissionServiceClient) GetServeApplications(ctx context.Context, in *GetRayServeApplicationsRequest, opts ...grpc.CallOption) (*GetRayServeApplicationReply, error) {
	out := new(GetRayServeApplicationReply)
	err := c.cc.Invoke(ctx, "/proto.RayServeSubmissionService/GetServeApplications", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rayServeSubmissionServiceClient) DeleteRayServeApplications(ctx context.Context, in *DeleteRayServeApplicationsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.RayServeSubmissionService/DeleteRayServeApplications", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RayServeSubmissionServiceServer is the server API for RayServeSubmissionService service.
// All implementations must embed UnimplementedRayServeSubmissionServiceServer
// for forward compatibility
type RayServeSubmissionServiceServer interface {
	// Submit a new Ray Serve Application on the specified cluster in a namespace.
	SubmitServeApplications(context.Context, *SubmitRayServeApplicationsRequest) (*emptypb.Empty, error)
	// Get Serve applications for a given cluster in a namespace.
	GetServeApplications(context.Context, *GetRayServeApplicationsRequest) (*GetRayServeApplicationReply, error)
	// Shuts down Serve and all applications running on a given cluster in a namespace..
	DeleteRayServeApplications(context.Context, *DeleteRayServeApplicationsRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedRayServeSubmissionServiceServer()
}

// UnimplementedRayServeSubmissionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRayServeSubmissionServiceServer struct {
}

func (UnimplementedRayServeSubmissionServiceServer) SubmitServeApplications(context.Context, *SubmitRayServeApplicationsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitServeApplications not implemented")
}
func (UnimplementedRayServeSubmissionServiceServer) GetServeApplications(context.Context, *GetRayServeApplicationsRequest) (*GetRayServeApplicationReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServeApplications not implemented")
}
func (UnimplementedRayServeSubmissionServiceServer) DeleteRayServeApplications(context.Context, *DeleteRayServeApplicationsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRayServeApplications not implemented")
}
func (UnimplementedRayServeSubmissionServiceServer) mustEmbedUnimplementedRayServeSubmissionServiceServer() {
}

// UnsafeRayServeSubmissionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RayServeSubmissionServiceServer will
// result in compilation errors.
type UnsafeRayServeSubmissionServiceServer interface {
	mustEmbedUnimplementedRayServeSubmissionServiceServer()
}

func RegisterRayServeSubmissionServiceServer(s grpc.ServiceRegistrar, srv RayServeSubmissionServiceServer) {
	s.RegisterService(&RayServeSubmissionService_ServiceDesc, srv)
}

func _RayServeSubmissionService_SubmitServeApplications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitRayServeApplicationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RayServeSubmissionServiceServer).SubmitServeApplications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RayServeSubmissionService/SubmitServeApplications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RayServeSubmissionServiceServer).SubmitServeApplications(ctx, req.(*SubmitRayServeApplicationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RayServeSubmissionService_GetServeApplications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRayServeApplicationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RayServeSubmissionServiceServer).GetServeApplications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RayServeSubmissionService/GetServeApplications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RayServeSubmissionServiceServer).GetServeApplications(ctx, req.(*GetRayServeApplicationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RayServeSubmissionService_DeleteRayServeApplications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRayServeApplicationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RayServeSubmissionServiceServer).DeleteRayServeApplications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RayServeSubmissionService/DeleteRayServeApplications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RayServeSubmissionServiceServer).DeleteRayServeApplications(ctx, req.(*DeleteRayServeApplicationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RayServeSubmissionService_ServiceDesc is the grpc.ServiceDesc for RayServeSubmissionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RayServeSubmissionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.RayServeSubmissionService",
	HandlerType: (*RayServeSubmissionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitServeApplications",
			Handler:    _RayServeSubmissionService_SubmitServeApplications_Handler,
		},
		{
			MethodName: "GetServeApplications",
			Handler:    _RayServeSubmissionService_GetServeApplications_Handler,
		},
		{
			MethodName: "DeleteRayServeApplications",
			Handler:    _RayServeSubmissionService_DeleteRayServeApplications_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "serve_submission.proto",
}
